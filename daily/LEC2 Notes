///// Arrays

# An array is a data structure used to store multiple elements.
# Arrays are used by many algorithms.



# In Python, an array can be created like this:
my_array = [7, 12, 9, 4, 11]

///// Indexing 
Arrays are indexed, meaning that each element in the array has an index, a number that says where in the array the element is located.


///// Implementation

# Before implementing the algorithm using an actual programming language, it is usually smart to first write the algorithm as a step-by-step procedure.

If you can write down the algorithm in something between human language and programming language, the algorithm will be easier to implement later because
we avoid drowning in all the details of the programming language syntax.

    Create a variable 'minVal' and set it equal to the first value of the array.
    Go through every element in the array.
    If the current element has a lower value than 'minVal', update 'minVal' to this value.
    After looking at all the elements in the array, the 'minVal' variable now contains the lowest value.

# You can also write the algorithm in a way that looks more like a programming language if you want to, like this:

Variable 'minVal' = array[0]   |
For each element in the array  |
                               | } it is called pseudocode
   If current element < minVal |
      minVal = current element |


///// Algorithm Time Complexity

# Run Time
# When exploring algorithms, we often look at how much time an algorithm takes to run relative to the size of the data set.

For some examples the time the algorithm needs to run is proportional, or linear, to the size of the data set.
This is because the algorithm must visit every array element one time to find the lowest value.
The loop must run 5 times if there are 5 values in the array. And if the array had 1000 values, the loop would have to run 1000 times.



