///// Selection Sort
The Selection Sort algorithm finds the lowest value in an array and moves it to the front of the array.



# How it works:
    Go through the array to find the lowest value.
    Move the lowest value to the front of the unsorted part of the array.
    Go through the array again as many times as there are values in the array.

//// Selection Sort Implementation

To implement the Selection Sort algorithm in a programming language, we need:

   1 An array with values to sort.
   2 An inner loop that goes through the array, finds the lowest value, and moves it to the front of the array. 
     This loop must loop through one less value each time it runs.
   3 An outer loop that controls how many times the inner loop must run. For an array with n
    values, this outer loop must run n−1 times.

# Selection Sort Shifting Problem
Each time the next lowest value array element is removed, all following elements must be shifted one place down to make up for the removal.
it is then inserted at the start of the array, causing all following values to shift one position up to make space for the new value

//// Solution: Swap Values!

# Selection Sort Time Complexity 

Selection Sort sorts an array of n values. On average, about n2 elements are compared to find the lowest value in each loop.
And Selection Sort must run the loop to find the lowest value approximately n times.

We get time complexity:

                          O(n/2⋅n)=O(n2)

