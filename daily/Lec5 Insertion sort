///// Insertion Sort

The Insertion Sort algorithm uses one part of the array to hold the sorted values, and the other part of the array to hold values that are not sorted yet.


# How it works:

    Take the first value from the unsorted part of the array.
    Move the value into the correct place in the sorted part of the array.
    Go through the unsorted part of the array again as many times as there are values.

# Insertion Sort Implementation

To implement the Insertion Sort algorithm in a programming language, we need:

  1 An array with values to sort.
  2 An outer loop that picks a value to be sorted. For an array with n values, this outer loop skips the first value, and must run n−1
    times.
  3 An inner loop that goes through the sorted part of the array, to find where to insert the value. If the value to be sorted is at index i
    the sorted part of the array starts at index 0 and ends at index i−1.

# Insertion Sort Improvement
The problem with this way of programming it is that when removing a value from the array, all elements above must be shifted one index place down
And when inserting the removed value into the array again, there are also many shift operations that must be done: all following elements must shift one position up to make place for the inserted value

soln: We can avoid most of these shift operations by only shifting the values necessary

# Insertion Sort Time Complexity

Insertion Sort sorts an array of n values. On average, each value must be compared to about n2
other values to find the correct place to insert it.
Insertion Sort must run the loop to insert a value in its correct place approximately n times.

We get time complexity for Insertion Sort:

O(n2⋅n)=O(n2)
